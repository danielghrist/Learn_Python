# DAY 27 LESSONS
# INCLUDES TKINTER AND ADVANCED ARGUMENTS

# ***** DEFAULT ARGUMENTS FOR FUNCTIONS:
# YOU CAN CALL A FUNCTION WITH ARGUMENTS IN ANY ORDER IF YOU NAME THEM I.E (c=3, a=1, b=2) FOR (a, b, c)
# PYTHON CAN CREATE ARGUMENTS WITH DEFAULT VALUES SO YOU DON'T HAVE TO PASS ARGUMENTS WHEN CALLING FUNC
# YOU ONLY HAVE TO PASS REQUIRED KEYWORD ARGUMENTS
#  KEYWORD ARGUMENTS ARE A DEFINED ARGUMENT (text="text to insert")
#     KEYWORD ARGUMENTS CAN BE CALLED IN ANY POSITION AS LONG AS THEY HAVE THEIR IDENTIFIER
#  POSITIONAL ARGUMENTS USE THE POSITION THAT THEY ARE PASSED INTO THE FUNCTION TO DETERMINE WHAT
#    PARAMETER THEY APPLY TO
#
# END DEFAULT ARGUMENTS FOR FUNCTIONS *****

# ***** UNLIMITED ARGUMENTS:
# INSTEAD OF DEFINING PARAMETERS ONLY USE (*args)
# THE *args WILL BE A TUPLE
# YOU CAN LOOP THROUGH THE *args TUPLE INSIDE THE FUNCTION
# EXAMPLE:
# def add(*args):
#     for n in args:
#         print(n)
# SEE PLAYGROUND.PY FOR EXAMPLE AS WELL
# END UNLIMITED ARGUMENTS *****


***** UNLIMITED KEYWORD ARGUMENTS (**kwargs):
    SEE PLAYGROUND.PY FOR EXAMPLES
    1.  **kwargs returns a dictionary of what was passed into the function when it was called.
    2.  "kwargs" is a variable name and the conventional name of the variable is "kw" (**kw),
        however you can use **any_name you wish as long as the ** is before it
    3.  You can use the dictionary [] technique to access keys and values OR
        you can use a dictionary method called .get(key) and pass in the keyword argument label
***** UNLIMITED KEYWORD ARGUMENTS (**kwargs) *****


# HOW TO CREATE A LABEL
my_label = tkinter.Label(text="I am a Label.", font=("Helvetica", 50, "bold"))
# HOW TO SHOW LABEL ON SCREEN
my_label.pack(expand= True)
my_label.pack()

# TKINTER MAINLOOP NEEDS TO BE AT THE END OF THE PROGRAM TO CREATE WINDOW AND LISTEN FOR EVENTS
# tkinter holds onto window in the while loop and listens for inputs
# This will keep window viewable and listening
window.mainloop()


***** LAYOUT MANAGERS (PACK, PLACE, GRID ) *****
    tkinter uses three different types of layout managers

    1.  .pack():  Starts from the top and packs each widget just below the previous one.
            - Can be changed with the "side=" argument.
    2. .place():  All about precise positioning.  Can place at exact coordinates.
        - .place(x=100, y=200)
    3.  .grid():  Imagines the program is a grid, and it can be divided into any number of rows or columns that you wish.
            - .grid(columns=0, row=0)
            - Relative to other components (widgets).
            - Start widget on column=0, row=0
            - Cannot mix .grid() and .pack(), they are mutually exclusive


***** EXAMPLES OF DIFFERENT TYPES OF WIDGETS FOR CREATING ITEMS

from tkinter import *

#Creating a new window and configurations
window = Tk()
window.title("Widget Examples")
window.minsize(width=500, height=500)

#Labels
label = Label(text="This is old text")
label.config(text="This is new text")
label.pack()

#Buttons
def action():
    print("Do something")

#calls action() when pressed
button = Button(text="Click Me", command=action)
button.pack()

#Entries
entry = Entry(width=30)
#Add some text to begin with
entry.insert(END, string="Some text to begin with.")
#Gets text in entry
print(entry.get())
entry.pack()

#Text
text = Text(height=5, width=30)
#Puts cursor in textbox.
text.focus()
#Adds some text to begin with.
text.insert(END, "Example of multi-line text entry.")
#Get's current value in textbox at line 1, character 0
print(text.get("1.0", END))
text.pack()

#Spinbox
def spinbox_used():
    #gets the current value in spinbox.
    print(spinbox.get())
spinbox = Spinbox(from_=0, to=10, width=5, command=spinbox_used)
spinbox.pack()

#Scale
#Called with current scale value.
def scale_used(value):
    print(value)
scale = Scale(from_=0, to=100, command=scale_used)
scale.pack()

#Checkbutton
def checkbutton_used():
    #Prints 1 if On button checked, otherwise 0.
    print(checked_state.get())
#variable to hold on to checked state, 0 is off, 1 is on.
checked_state = IntVar()
checkbutton = Checkbutton(text="Is On?", variable=checked_state, command=checkbutton_used)
checked_state.get()
checkbutton.pack()

#Radiobutton
def radio_used():
    print(radio_state.get())
#Variable to hold on to which radio button value is checked.
radio_state = IntVar()
radiobutton1 = Radiobutton(text="Option1", value=1, variable=radio_state, command=radio_used)
radiobutton2 = Radiobutton(text="Option2", value=2, variable=radio_state, command=radio_used)
radiobutton1.pack()
radiobutton2.pack()


#Listbox
def listbox_used(event):
    # Gets current selection from listbox
    print(listbox.get(listbox.curselection()))

listbox = Listbox(height=4)
fruits = ["Apple", "Pear", "Orange", "Banana"]
for item in fruits:
    listbox.insert(fruits.index(item), item)
listbox.bind("<<ListboxSelect>>", listbox_used)
listbox.pack()
window.mainloop()

***** END OF EXAMPLES OF WIDGETS*****